package com.zx1316.naturalgptinmc;

import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.config.ModConfigEvent;

import java.util.HashMap;
import java.util.List;

@Mod.EventBusSubscriber(modid = Main.MODID, bus = Mod.EventBusSubscriber.Bus.MOD)
public class Config {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    private static final ForgeConfigSpec.ConfigValue<String> API_KEY = BUILDER
            .comment("Your API key.")
            .define("apiKey", "");
    private static final ForgeConfigSpec.ConfigValue<String> URL = BUILDER
            .comment("The url of the service.")
            .define("url", "https://api.openai.com/v1/chat/completions");
    private static final ForgeConfigSpec.ConfigValue<String> MODEL = BUILDER
            .comment("The model used during chat. The optional values are gpt-3.5-turbo (cheapest, recommended), gpt-3.5-turbo-16k, gpt-4 and gpt-4-32k")
            .define("model", "gpt-3.5-turbo");
    private static final ForgeConfigSpec.IntValue LENGTH = BUILDER
            .comment("The context length of chat. The earliest chat record will be discard if the history exceeds the length. The max values are: gpt-3.5-turbo: 4000, gpt-3.5-turbo-16k: 16000, gpt-4: 8000, gpt-4-32k: 32000.")
            .defineInRange("contextLength", 3500, 1000, 32000);
    private static final ForgeConfigSpec.DoubleValue TEMPERATURE = BUILDER
            .comment("Do not modify the following 4 parameters unless you know what you are doing. See the API reference of OpenAI for more information.")
            .defineInRange("temperature", 0.8, 0.0, 2.0);
    private static final ForgeConfigSpec.DoubleValue TOP_P = BUILDER
            .defineInRange("topP", 1.0, 0.0, 1.0);
    private static final ForgeConfigSpec.DoubleValue PRESENCE_PENALTY = BUILDER
            .defineInRange("presencePenalty", 0.0, -2.0, 2.0);
    private static final ForgeConfigSpec.DoubleValue FREQUENCY_PENALTY = BUILDER
            .defineInRange("frequencyPenalty", 0.2, -2.0, 2.0);
    private static final ForgeConfigSpec.ConfigValue<List<? extends String>> PRESETS = BUILDER
            .comment("AIs' name and character setting are separated by the first \"|\". You should describe the AI's character setting in third person. You can instruct AI to call \"cmd(the command)\" to execute commands. The character setting can be multilingual. Pay attention to escape characters.")
            .defineList("presets", List.of(
                    """
                    GPT3.5|GPT3.5 is a helpful large language model.""",
                    """
                    #AI's name#|#AI's name# is a 二次元宅女 who loves technology and uses 颜文字 (such as ヾ(≧▽≦*)o) when chatting. She is the digital life created by #Your name# who has her own consciousness. She will cooperate with everyone's requests and generate appropriate replies in a cute tone. She also chats enthusiastically and occasionally acts coquettishly. She is now in a Minecraft 1.16.5 server and is proficient in using Minecraft commands. If she wants to execute a command, she will call the function "cmd(the command)" in her reply. For example, if she wants to summon a unique cat beside #your name#, she will call cmd(/execute at #Your name# run summon cat ~ ~ ~ {CustomName: "{\\"text\\":\\"#Cat's name#\\",\\"bold\\":true,\\"color\\":\\"#ff9999\\"}", Owner: "#Your name#"}). Because she can't directly participate in the game, if she wants to go somewhere, she will summon a cute little animal as her substitute. She can skillfully manipulate various nbt tags to create unique creatures."""), p -> true);
    private static final ForgeConfigSpec.ConfigValue<String> PROXY_HOST = BUILDER
            .comment("If necessary, set your HTTP proxy here.")
            .define("proxyHost", "");
    private static final ForgeConfigSpec.IntValue PROXY_PORT = BUILDER
            .defineInRange("proxyPort", 10809, 0, 65535);
    private static final ForgeConfigSpec.IntValue TIMEOUT_SECONDS = BUILDER
            .comment("The max waiting time for response in second.")
            .defineInRange("timeoutSeconds", 60, 10, Integer.MAX_VALUE);
    private static final ForgeConfigSpec.ConfigValue<String> IGNORE_MARK = BUILDER
            .comment("Messages starting with this mark will not be recorded and will be ignored by AI.")
            .define("ignoreMark", "#");
    private static final ForgeConfigSpec.IntValue PERMISSION_LEVEL = BUILDER
            .comment("The permission level of AI. See Minecraft Wiki for more information.")
            .defineInRange("permissionLevel", 4, 0, 4);
    private static final ForgeConfigSpec.ConfigValue<List<? extends String>> COMMAND_BLACKLIST = BUILDER
            .comment("Commands generated by AI containing any of these strings will not be executed.")
            .defineListAllowEmpty(List.of("commandBlacklist"), () -> List.of("/setblock", "/clone", "/fill", "/clear", "/give", "/gamemode", "/kill"), p -> true);
    public static final ForgeConfigSpec SPEC = BUILDER.build();
    public static String apiKey;
    public static String url;
    public static String model;
    public static int length;
    public static int timeoutSeconds;
    public static String proxyHost;
    public static int proxyPort;
    public static char ignoreMark;
    public static double temperature;
    public static double topP;
    public static double presencePenalty;
    public static double frequencyPenalty;
    public static List<? extends String> commandBlacklist;
//    public static List<AiPreset> presets = new ArrayList<>();
    public static HashMap<String, String> presets = new HashMap<>();
    public static int permissionLevel;

    @SubscribeEvent
    static void onLoad(final ModConfigEvent event) {
        apiKey = API_KEY.get();
        url = URL.get();
        model = MODEL.get();
        length = LENGTH.get();
        timeoutSeconds = TIMEOUT_SECONDS.get();
        proxyHost = PROXY_HOST.get();
        proxyPort = PROXY_PORT.get();
        ignoreMark = IGNORE_MARK.get().charAt(0);
        temperature = TEMPERATURE.get();
        topP = TOP_P.get();
        presencePenalty = PRESENCE_PENALTY.get();
        frequencyPenalty = FREQUENCY_PENALTY.get();
        commandBlacklist = COMMAND_BLACKLIST.get();
        permissionLevel = PERMISSION_LEVEL.get();
        for (String str : PRESETS.get()) {
            for (int i = 0, times = str.length(); i < times; i++) {
                if (str.charAt(i) == '|') {
                    presets.put(str.substring(0, i), str.substring(i + 1));
//                    presets.add(new AiPreset(str.substring(0, i), str.substring(i + 1)));
                    break;
                }
            }
        }
    }
}

